library(dplyr)
library(Seurat)
library(patchwork)
# Extract the pbmc3k_filtered_gene_bc_matrices.tar.gz
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# In the example below, we visualize QC metrics, and use these to filter cells.
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
#Filter by thresholds
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#After removing unwanted cells from the dataset, the next step is to
#normalize the data. By default, Seurat employs a global-scaling normalization
#method “LogNormalize” that normalizes the feature expression measurements
#for each cell by the total expression, multiplies this by a scale factor (10,000 by default),
#and log-transforms the result. Normalized values are stored in pbmc[["RNA"]]@data.
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000) #'pbmc <- NormalizeData(pbmc)' is equivalent
#We next calculate a subset of features that exhibit high cell-to-cell variation
#in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others).
#Focusing on these genes in downstream analysis helps to highlight biological signal in single-cell datasets.
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
#Scaling Data
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
#Perform linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualise PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
#Dimensional Loadings
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
#Heatmap (especially good for visualising prominant sources of heterogeneity)
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# How about the first 15?
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
# Examine elbow plot to decide cutoff for priciple components
# Try downstream analysis with different cutoffs! How does it affect the results?
ElbowPlot(pbmc)
#Clustering
#KNN with edge weights refined by Jaccard similarity (shared overlap of local nearest neighbours).
#   clusters can be found using the Idents() function.
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
#Run non-linear dimensional reduction (UMAP/tSNE) using the same PCs as input to the clustering analysis.
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages ='umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
